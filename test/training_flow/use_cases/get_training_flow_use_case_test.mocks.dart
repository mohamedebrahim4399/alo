// Mocks generated by Mockito 5.4.4 from annotations
// in alo/test/training_flow/use_cases/get_training_flow_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:alo/training_flow/domain/entitys/training_flow_entity.dart'
    as _i5;
import 'package:alo/training_flow/domain/repository/training_flow_repository.dart'
    as _i2;
import 'package:either_dart/either.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TrainingFlowRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrainingFlowRepository extends _i1.Mock
    implements _i2.TrainingFlowRepository {
  MockTrainingFlowRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<Exception, _i5.TrainingFlowEntity>> getTrainingFlow() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrainingFlow,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Either<Exception, _i5.TrainingFlowEntity>>.value(
                _i6.dummyValue<_i4.Either<Exception, _i5.TrainingFlowEntity>>(
          this,
          Invocation.method(
            #getTrainingFlow,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<Exception, _i5.TrainingFlowEntity>>);
}
